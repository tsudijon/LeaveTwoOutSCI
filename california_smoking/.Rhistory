rao_b.smoothed.decision[i+1] = mean(smoothed.decision[i + rpois(mcs,h) +1])
}
plot(rao_b.smoothed.decision[1:(max(ys)+1)])
plot(smoothed.decision[1:(max(ys)+1)])
mcs = 1000
smoothed.decision = rep(0,100)
for (i in 0:100){
smoothed.decision[i+1] = (i+1)*p.hat.z[i+2]/p.hat.z[i+1] - h
}
smoothed.decision[!is.finite(smoothed.decision)] <- 0
rao_b.smoothed.decision = rep(0,80)
for (i in 0:79){
rao_b.smoothed.decision[i+1] = mean(smoothed.decision[i + rpois(mcs,h) +1])
}
plot(rao_b.smoothed.decision[1:(max(ys)+1)])
rao_b.smoothed = rep(0,n)
for (i in 1:n){
rao_b.smoothed[i] = rao_b.smoothed.decision[ys[i]+1]
}
rao_b.smoothed.loss = sum((rao_b.smoothed - lambdas)^2)
rao_b.smoothed.loss
d <- rao_b.smoothed.decision
d[is.na(d)] <- 0
iso.rao_b.smoothed.decision = isoreg(d[1:(max(ys)+1)])$yf
plot(iso.rao_b.smoothed.decision)
iso.rao_b.smoothed = rep(0,n)
for (i in 1:n){
iso.rao_b.smoothed[i] = iso.rao_b.smoothed.decision[ys[i]+1]
}
iso.rao_b.smoothed.loss = sum((iso.rao_b.smoothed - lambdas)^2)
iso.rao_b.smoothed.loss
rao_b.smoothed = rep(0,n)
for (i in 1:n){
rao_b.smoothed[i] = rao_b.smoothed.decision[ys[i]+1]
}
rao_b.smoothed.loss = sum((rao_b.smoothed - lambdas)^2)
rao_b.smoothed.loss
d <- rao_b.smoothed.decision
d[is.na(d)] <- 0
iso.rao_b.smoothed.decision = isoreg(d[1:(max(ys)+1)])$yf
plot(iso.rao_b.smoothed.decision)
iso.rao_b.smoothed = rep(0,n)
for (i in 1:n){
iso.rao_b.smoothed[i] = iso.rao_b.smoothed.decision[ys[i]+1]
}
iso.rao_b.smoothed.loss = sum((iso.rao_b.smoothed - lambdas)^2)
iso.rao_b.smoothed.loss
iso.rao_b.smoothed = rep(0,n)
for (i in 1:n){
iso.rao_b.smoothed[i] = iso.rao_b.smoothed.decision[ys[i]+1]
}
iso.rao_b.smoothed.loss = sum((iso.rao_b.smoothed - lambdas)^2)
iso.rao_b.smoothed.loss
hist(iso.rao_b.smoothed)
iso.rao_b.smoothed
n = 500
lambdas = seq(10,10,length.out = n)
ys = rep(0,n)
for (i in 1:n) {
ys[i] = rpois(1,lambdas[i])
}
naive = ys
naive.loss = sum((naive - lambdas)^2)
naive.loss
hist(naive)
naive = ys
naive.loss = sum((naive - lambdas)^2)
naive.loss
hist(naive)
robbins = rep(0,n)
for (i in 1:n){
robbins[i] = (ys[i]+1)*sum(ys == ys[i]+1)/sum(ys == ys[i])
}
robbins.loss = sum((robbins - lambdas)^2)
robbins.loss
hist(robbins)
smoothed = rep(0,n)
h = 3
zs = rpois(n, h) + ys
# create smoothened eCDF
ecdf.y = rep(0,100+3)
for (i in 1:(100+3) ){
ecdf.y[i] = sum(ys == i-1)/n
}
pois.pdf = dpois(0:(100+2),h)
p.hat.z = rep(0,100+3)
for (z in 1:(100+2) ){
p.hat.z[z] = sum(ecdf.y[1:(z+1)]*rev(pois.pdf[1:(z+1)]))
}
# plot ecdf and smoothened estimate
plot(ecdf.y)
plot(p.hat.z)
for (i in 1:n){
smoothed[i] = (zs[i]+1)*p.hat.z[zs[i]+2]/p.hat.z[zs[i]+1] - h
}
smoothed.loss = sum((smoothed - lambdas)^2)
smoothed.loss
hist(smoothed)
mcs = 1000
smoothed.decision = rep(0,100)
for (i in 0:100){
smoothed.decision[i+1] = (i+1)*p.hat.z[i+2]/p.hat.z[i+1] - h
}
smoothed.decision[!is.finite(smoothed.decision)] <- 0
rao_b.smoothed.decision = rep(0,80)
for (i in 0:79){
rao_b.smoothed.decision[i+1] = mean(smoothed.decision[i + rpois(mcs,h) +1])
}
plot(rao_b.smoothed.decision[1:(max(ys)+1)])
rao_b.smoothed = rep(0,n)
for (i in 1:n){
rao_b.smoothed[i] = rao_b.smoothed.decision[ys[i]+1]
}
rao_b.smoothed.loss = sum((rao_b.smoothed - lambdas)^2)
rao_b.smoothed.loss
d <- rao_b.smoothed.decision
d[is.na(d)] <- 0
iso.rao_b.smoothed.decision = isoreg(d[1:(max(ys)+1)])$yf
plot(iso.rao_b.smoothed.decision)
iso.rao_b.smoothed = rep(0,n)
for (i in 1:n){
iso.rao_b.smoothed[i] = iso.rao_b.smoothed.decision[ys[i]+1]
}
iso.rao_b.smoothed.loss = sum((iso.rao_b.smoothed - lambdas)^2)
iso.rao_b.smoothed.loss
hist(iso.rao_b.smoothed)
naive.losses = rep(0,20)
robbins.losses = rep(0,20)
ns = seq(100,5000,length.out = 20)
for (j in 1:20){
n = ns[j]
lambdas = seq(5,25,length.out = n)
ys = rep(0,n)
for (i in 1:n) {
ys[i] = rpois(1,lambdas[i])
}
naive = ys
naive.losses[j] = sum((naive - lambdas)^2)
robbins = rep(0,n)
for (i in 1:n){
robbins[i] = (ys[i]+1)*sum(ys == ys[i]+1)/sum(ys == ys[i])
}
robbins.losses[j] = sum((robbins - lambdas)^2)
}
df = data.frame(n = ns,robbins = robbins.losses, naive = naive.losses)
require(ggplot2)
ggplot(df, aes(n)) +                    # basic graphical object
geom_line(aes(y=robbins), colour="red") +  # first layer
geom_line(aes(y=naive), colour="green") +  # second layer
theme(legend.position="top")
smoothed = rep(0,n)
other.smoothed = rep(0,n)
other.smoothed = rep(0,n)
# create smoothened eCDF
ecdf.y = rep(0,100+3)
for (i in 1:(100+3) ){
ecdf.y[i] = sum(ys == i-1)/n
}
p.hat.other
other.smoothed = rep(0,n)
# create smoothened eCDF
ecdf.y = rep(0,100+3)
for (i in 1:(100+3) ){
ecdf.y[i] = sum(ys == i-1)/n
}
ecdf.y
plot(ecdf.y)
n = 500
lambdas = seq(10,10,length.out = n)
ys = rep(0,n)
for (i in 1:n) {
ys[i] = rpois(1,lambdas[i])
}
naive = ys
naive.loss = sum((naive - lambdas)^2)
naive.loss
hist(naive)
robbins = rep(0,n)
for (i in 1:n){
robbins[i] = (ys[i]+1)*sum(ys == ys[i]+1)/sum(ys == ys[i])
}
robbins.loss = sum((robbins - lambdas)^2)
robbins.loss
hist(robbins)
robbins = rep(0,n)
for (i in 1:n){
robbins[i] = (ys[i]+1)*sum(ys == ys[i]+1)/sum(ys == ys[i])
}
robbins.loss = sum((robbins - lambdas)^2)
robbins.loss
hist(robbins)
smoothed = rep(0,n)
h = 3
zs = rpois(n, h) + ys
# create smoothened eCDF
ecdf.y = rep(0,100+3)
for (i in 1:(100+3) ){
ecdf.y[i] = sum(ys == i-1)/n
}
pois.pdf = dpois(0:(100+2),h)
p.hat.z = rep(0,100+3)
for (z in 1:(100+2) ){
p.hat.z[z] = sum(ecdf.y[1:(z+1)]*rev(pois.pdf[1:(z+1)]))
}
# plot ecdf and smoothened estimate
plot(ecdf.y)
plot(p.hat.z)
for (i in 1:n){
smoothed[i] = (zs[i]+1)*p.hat.z[zs[i]+2]/p.hat.z[zs[i]+1] - h
}
smoothed.loss = sum((smoothed - lambdas)^2)
smoothed.loss
hist(smoothed)
mcs = 1000
smoothed.decision = rep(0,100)
for (i in 0:100){
smoothed.decision[i+1] = (i+1)*p.hat.z[i+2]/p.hat.z[i+1] - h
}
smoothed.decision[!is.finite(smoothed.decision)] <- 0
rao_b.smoothed.decision = rep(0,80)
for (i in 0:79){
rao_b.smoothed.decision[i+1] = mean(smoothed.decision[i + rpois(mcs,h) +1])
}
plot(rao_b.smoothed.decision[1:(max(ys)+1)])
mcs = 1000
smoothed.decision = rep(0,100)
for (i in 0:100){
smoothed.decision[i+1] = (i+1)*p.hat.z[i+2]/p.hat.z[i+1] - h
}
smoothed.decision[!is.finite(smoothed.decision)] <- 0
rao_b.smoothed.decision = rep(0,80)
for (i in 0:79){
rao_b.smoothed.decision[i+1] = mean(smoothed.decision[i + rpois(mcs,h) +1])
}
plot(smoothed.decision[1:(max(ys)+1)])
plot(rao_b.smoothed.decision[1:(max(ys)+1)])
rao_b.smoothed = rep(0,n)
for (i in 1:n){
rao_b.smoothed[i] = rao_b.smoothed.decision[ys[i]+1]
}
rao_b.smoothed.loss = sum((rao_b.smoothed - lambdas)^2)
rao_b.smoothed.loss
d <- rao_b.smoothed.decision
d[is.na(d)] <- 0
iso.rao_b.smoothed.decision = isoreg(d[1:(max(ys)+1)])$yf
plot(iso.rao_b.smoothed.decision)
iso.rao_b.smoothed = rep(0,n)
for (i in 1:n){
iso.rao_b.smoothed[i] = iso.rao_b.smoothed.decision[ys[i]+1]
}
iso.rao_b.smoothed.loss = sum((iso.rao_b.smoothed - lambdas)^2)
iso.rao_b.smoothed.loss
hist(iso.rao_b.smoothed)
iso.rao_b.smoothed = rep(0,n)
for (i in 1:n){
iso.rao_b.smoothed[i] = iso.rao_b.smoothed.decision[ys[i]+1]
}
iso.rao_b.smoothed.loss = sum((iso.rao_b.smoothed - lambdas)^2)
iso.rao_b.smoothed.loss
hist(iso.rao_b.smoothed)
n = 500
lambdas = seq(10,10,length.out = n)
ys = rep(0,n)
for (i in 1:n) {
ys[i] = rpois(1,lambdas[i])
}
naive = ys
naive.loss = sum((naive - lambdas)^2)
naive.loss
hist(naive)
naive = ys
naive.loss = sum((naive - lambdas)^2)
naive.loss
hist(naive)
robbins = rep(0,n)
for (i in 1:n){
robbins[i] = (ys[i]+1)*sum(ys == ys[i]+1)/sum(ys == ys[i])
}
robbins.loss = sum((robbins - lambdas)^2)
robbins.loss
hist(robbins)
smoothed = rep(0,n)
h = 3
zs = rpois(n, h) + ys
# create smoothened eCDF
ecdf.y = rep(0,100+3)
for (i in 1:(100+3) ){
ecdf.y[i] = sum(ys == i-1)/n
}
pois.pdf = dpois(0:(100+2),h)
p.hat.z = rep(0,100+3)
for (z in 1:(100+2) ){
p.hat.z[z] = sum(ecdf.y[1:(z+1)]*rev(pois.pdf[1:(z+1)]))
}
# plot ecdf and smoothened estimate
plot(ecdf.y)
plot(p.hat.z)
for (i in 1:n){
smoothed[i] = (zs[i]+1)*p.hat.z[zs[i]+2]/p.hat.z[zs[i]+1] - h
}
smoothed.loss = sum((smoothed - lambdas)^2)
smoothed.loss
hist(smoothed)
mcs = 1000
smoothed.decision = rep(0,100)
for (i in 0:100){
smoothed.decision[i+1] = (i+1)*p.hat.z[i+2]/p.hat.z[i+1] - h
}
smoothed.decision[!is.finite(smoothed.decision)] <- 0
rao_b.smoothed.decision = rep(0,80)
for (i in 0:79){
rao_b.smoothed.decision[i+1] = mean(smoothed.decision[i + rpois(mcs,h) +1])
}
plot(smoothed.decision[1:(max(ys)+1)])
plot(rao_b.smoothed.decision[1:(max(ys)+1)])
rao_b.smoothed = rep(0,n)
for (i in 1:n){
rao_b.smoothed[i] = rao_b.smoothed.decision[ys[i]+1]
}
rao_b.smoothed.loss = sum((rao_b.smoothed - lambdas)^2)
rao_b.smoothed.loss
d <- rao_b.smoothed.decision
d[is.na(d)] <- 0
iso.rao_b.smoothed.decision = isoreg(d[1:(max(ys)+1)])$yf
plot(iso.rao_b.smoothed.decision)
iso.rao_b.smoothed = rep(0,n)
for (i in 1:n){
iso.rao_b.smoothed[i] = iso.rao_b.smoothed.decision[ys[i]+1]
}
iso.rao_b.smoothed.loss = sum((iso.rao_b.smoothed - lambdas)^2)
iso.rao_b.smoothed.loss
hist(iso.rao_b.smoothed)
lambdas = seq(10,10,length.out = n)
d <- rao_b.smoothed.decision
d[is.na(d)] <- 0
iso.rao_b.smoothed.decision = isoreg(d[1:(max(ys)+1)])$yf
plot(iso.rao_b.smoothed.decision)
mcs = 10000
smoothed.decision = rep(0,100)
for (i in 0:100){
smoothed.decision[i+1] = (i+1)*p.hat.z[i+2]/p.hat.z[i+1] - h
}
smoothed.decision[!is.finite(smoothed.decision)] <- 0
rao_b.smoothed.decision = rep(0,80)
for (i in 0:79){
rao_b.smoothed.decision[i+1] = mean(smoothed.decision[i + rpois(mcs,h) +1])
}
plot(smoothed.decision[1:(max(ys)+1)])
plot(rao_b.smoothed.decision[1:(max(ys)+1)])
rao_b.smoothed = rep(0,n)
for (i in 1:n){
rao_b.smoothed[i] = rao_b.smoothed.decision[ys[i]+1]
}
rao_b.smoothed.loss = sum((rao_b.smoothed - lambdas)^2)
rao_b.smoothed.loss
d <- rao_b.smoothed.decision
d[is.na(d)] <- 0
iso.rao_b.smoothed.decision = isoreg(d[1:(max(ys)+1)])$yf
plot(iso.rao_b.smoothed.decision)
iso.rao_b.smoothed = rep(0,n)
for (i in 1:n){
iso.rao_b.smoothed[i] = iso.rao_b.smoothed.decision[ys[i]+1]
}
iso.rao_b.smoothed.loss = sum((iso.rao_b.smoothed - lambdas)^2)
iso.rao_b.smoothed.loss
hist(iso.rao_b.smoothed)
iso.rao_b.smoothed
iso.rao_b.smoothed.decision
d <- rao_b.smoothed.decision
d[is.na(d)] <- 0
iso.rao_b.smoothed.decision = isoreg(d[2:(max(ys)+1)])$yf
plot(iso.rao_b.smoothed.decision)
d <- rao_b.smoothed.decision
d[is.na(d)] <- 0
iso.rao_b.smoothed.decision = isoreg(d[2:(max(ys)+1)])$yf
plot(iso.rao_b.smoothed.decision)
ecdf.y
ecdf.y == 0
ecdf.y > 0
d <- rao_b.smoothed.decision
d[is.na(d)] <- 0
iso.rao_b.smoothed.decision = isoreg(d[ecdf.y > 0])$yf
iso.rao_b.smoothed.decision
d <- rao_b.smoothed.decision
d[is.na(d)] <- 0
iso.rao_b.smoothed.decision = rep(0,100)
iso.rao_b.smoothed.decision[ecdf.y > 0] = isoreg(d[ecdf.y > 0])$yf
plot(iso.rao_b.smoothed.decision)
iso.rao_b.smoothed = rep(0,n)
for (i in 1:n){
iso.rao_b.smoothed[i] = iso.rao_b.smoothed.decision[ys[i]+1]
}
iso.rao_b.smoothed.loss = sum((iso.rao_b.smoothed - lambdas)^2)
iso.rao_b.smoothed.loss
hist(iso.rao_b.smoothed)
iso.rao_b.smoothed = rep(0,n)
for (i in 1:n){
iso.rao_b.smoothed[i] = iso.rao_b.smoothed.decision[ys[i]+1]
}
iso.rao_b.smoothed.loss = sum((iso.rao_b.smoothed - lambdas)^2)
iso.rao_b.smoothed.loss
hist(iso.rao_b.smoothed)
d <- rao_b.smoothed.decision
d[is.na(d)] <- 0
iso.rao_b.smoothed.decision = rep(0,100)
iso.rao_b.smoothed.decision[ecdf.y > 0] = isoreg(d[ecdf.y > 0])$yf
#plot(iso.rao_b.smoothed.decision)
library(gurobi)
###############
#### Setup ####
###############
library(foreach)
library(doParallel)
library(Synth)
setwd("~/projects/Research/statistics_research/synthetic controls/software/california_smoking")
source("smoking_helper.R")
smoking = read.csv('californiaprop99.csv')[,-1]
smoking$state = as.character(smoking$state)
# California is country code 3
stateno <- unique(smoking$stateno)
states <- stateno[!stateno %in% 3]
treatment.unit <- 3
### Set the parameters for the analysis ###
N = length(states)
time.periods = 2000 - 1970 + 1
T0 = 1988 - 1970 + 1 #onset of treatment
dataprep.out <- smoking.sc.dataprep(smoking, 3, states)
synth.out <- synth(data.prep.obj = dataprep.out, method = "BFGS",quadopt = "LowRankQP")
dataprep.out <- smoking.sc.dataprep(smoking, 3, states)
synth.out <- synth(data.prep.obj = dataprep.out, method = "BFGS",quadopt = "ipop")
res1 <- dataprep.out$Y1plot -
(dataprep.out$Y0plot %*% synth.out$solution.w)
### R_{i,j}^LTO ###
nC2 <- (N-1)*(N-2)/2  # technically this is N-1 Choose 2
LTO.residuals <- matrix(0, nrow = nC2, ncol = time.periods)
LTO.RMSPEs <- rep(0,nC2)
LTO.indices <- matrix(0, nrow = nC2, ncol = 2)
pair.index <- 1
for (i in 1:(16-1)) {
for (j in (i+1):16) {
LTO.indices[pair.index,] <- c(i,j)
pair.index <- pair.index + 1
}
}
### Setup DoParallel ###
cores <- detectCores()
cl <- makeCluster(cores[1]-2) #not to overload your computer
registerDoParallel(cl)
simulation.results <- foreach(pair.index = 1:nC2,
.packages = c('optimx','rgenoud')) %dopar% {
i <- LTO.indices[pair.index,1]
j <- LTO.indices[pair.index,2]
jackknife.lto.units <- c(states[i],states[j])
controls <- states[! states %in% jackknife.lto.units]
### get SC on LTO unit ###
dataprep.out <- smoking.sc.dataprep(smoking, jackknife.lto.units[1], controls)
synth.out <- synth(data.prep.obj = dataprep.out, method = "BFGS",quadopt = "ipop")
res1 <- dataprep.out$Y1plot -
(dataprep.out$Y0plot %*% synth.out$solution.w)
RMSPE1 <- mean(res1[(T0+1):time.periods]^2)/mean(res1[1:T0]^2)
### get SC on other LTO unit ###
dataprep.out <- smoking.sc.dataprep(smoking, jackknife.lto.units[2], controls)
synth.out <- synth(data.prep.obj = dataprep.out, method = "BFGS",quadopt = "ipop")
res2 <- dataprep.out$Y1plot -
(dataprep.out$Y0plot %*% synth.out$solution.w)
RMSPE2 <- mean(res2[(T0+1):time.periods]^2)/ mean(res2[1:T0]^2)
LTO.residuals <- pmax(abs(res1),abs(res2))
LTO.RMSPEs <- max(RMSPE1, RMSPE2)
### run SC method on the actual treatment unit ###
dataprep.out <- smoking.sc.dataprep(smoking, treatment.unit, controls)
synth.out <- synth(data.prep.obj = dataprep.out, method = "BFGS",quadopt = "ipop")
res <- dataprep.out$Y1plot -
(dataprep.out$Y0plot %*% synth.out$solution.w)
LTO.residual.on.newpoint <- abs(res)
LTO.RMSPEs.on.newpoint <- mean(res[(T0+1):time.periods]^2)/mean(res[1:T0]^2)
res <- list(pair.index, LTO.residual.on.newpoint, LTO.RMSPEs.on.newpoint, LTO.residuals, LTO.RMSPEs)
names(res) <- c("pair.index", "LTO.time.res.treatment", "LTO.RMSPE.treatment",
"LTO.time.max.res.controls", "LTO.RMSPE.max.controls")
res
}
simulation.results <- foreach(pair.index = 1:nC2,
.packages = c('optimx','rgenoud','Synth')) %dopar% {
i <- LTO.indices[pair.index,1]
j <- LTO.indices[pair.index,2]
jackknife.lto.units <- c(states[i],states[j])
controls <- states[! states %in% jackknife.lto.units]
### get SC on LTO unit ###
dataprep.out <- smoking.sc.dataprep(smoking, jackknife.lto.units[1], controls)
synth.out <- synth(data.prep.obj = dataprep.out, method = "BFGS",quadopt = "ipop")
res1 <- dataprep.out$Y1plot -
(dataprep.out$Y0plot %*% synth.out$solution.w)
RMSPE1 <- mean(res1[(T0+1):time.periods]^2)/mean(res1[1:T0]^2)
### get SC on other LTO unit ###
dataprep.out <- smoking.sc.dataprep(smoking, jackknife.lto.units[2], controls)
synth.out <- synth(data.prep.obj = dataprep.out, method = "BFGS",quadopt = "ipop")
res2 <- dataprep.out$Y1plot -
(dataprep.out$Y0plot %*% synth.out$solution.w)
RMSPE2 <- mean(res2[(T0+1):time.periods]^2)/ mean(res2[1:T0]^2)
LTO.residuals <- pmax(abs(res1),abs(res2))
LTO.RMSPEs <- max(RMSPE1, RMSPE2)
### run SC method on the actual treatment unit ###
dataprep.out <- smoking.sc.dataprep(smoking, treatment.unit, controls)
synth.out <- synth(data.prep.obj = dataprep.out, method = "BFGS",quadopt = "ipop")
res <- dataprep.out$Y1plot -
(dataprep.out$Y0plot %*% synth.out$solution.w)
LTO.residual.on.newpoint <- abs(res)
LTO.RMSPEs.on.newpoint <- mean(res[(T0+1):time.periods]^2)/mean(res[1:T0]^2)
res <- list(pair.index, LTO.residual.on.newpoint, LTO.RMSPEs.on.newpoint, LTO.residuals, LTO.RMSPEs)
names(res) <- c("pair.index", "LTO.time.res.treatment", "LTO.RMSPE.treatment",
"LTO.time.max.res.controls", "LTO.RMSPE.max.controls")
res
}
