for (i in 1:n){
iso.rao_b.smoothed[i] = iso.rao_b.smoothed.decision[ys[i]+1]
}
iso.rao_b.smoothed.loss = sum((iso.rao_b.smoothed - lambdas)^2)
iso.rao_b.smoothed.loss
hist(iso.rao_b.smoothed)
d <- rao_b.smoothed.decision
d[is.na(d)] <- 0
iso.rao_b.smoothed.decision = rep(0,100)
iso.rao_b.smoothed.decision[ecdf.y > 0] = isoreg(d[ecdf.y > 0])$yf
#plot(iso.rao_b.smoothed.decision)
###############
#### Setup ####
###############
library(foreach)
library(doParallel)
library(Synth)
setwd("~/projects/Research/statistics_research/synthetic controls/software/german_reunification")
source("reunification_helper.R")
german.data <- read.csv("german_reunification.csv")
# West Germany is country code 7
codes <- unique(german.data$code)
countries <- codes[!codes %in% 7]
treatment.unit <- 7
### Set the parameters for the analysis ###
time.periods <- 2003 - 1960 + 1
T0 <- 1990 - 1960 + 1 #onset of treatment
simulation.results <- readRDS("GermanReunificationLTOResults.rds")
### Calculate the indicator of wins in three-way matches.
win.matrix <- matrix(0,nrow = 16, ncol = 16)
for (index in 1:nC2){
i <- LTO.indices[index,1]
j <- LTO.indices[index,2]
RMSPE.treatment <- simulation.results[[index]]$LTO.RMSPE.treatment
max.other.LTO.RMSPE <- simulation.results[[index]]$LTO.RMSPE.max.controls
win.matrix[i,j] =  (RMSPE.treatment < max.other.LTO.RMSPE)
win.matrix[j,i] = win.matrix[i,j]
}
win.matrix
###############
#### Setup ####
###############
library(foreach)
library(doParallel)
library(Synth)
setwd("~/projects/Research/statistics_research/synthetic controls/software/german_reunification")
source("reunification_helper.R")
german.data <- read.csv("german_reunification.csv")
# West Germany is country code 7
codes <- unique(german.data$code)
countries <- codes[!codes %in% 7]
treatment.unit <- 7
### Set the parameters for the analysis ###
time.periods <- 2003 - 1960 + 1
T0 <- 1990 - 1960 + 1 #onset of treatment
### Fill missing data: will backfill for same country, for same variable
library(dplyr)
library(tidyr)
german.data <- german.data %>% group_by(code) %>%
fill(c(infrate, trade, schooling, invest60, invest70,invest80, industry), .direction = "up") %>%
fill(c(infrate, trade, schooling, invest60, invest70,invest80, industry), .direction = "down")
german.data <- data.frame(german.data)
dataprep.out <- reunification.sc.dataprep(german.data, 7, countries)
synth.out <- synth(data.prep.obj = dataprep.out, method = "BFGS",quadopt = "LowRankQP")
res1 <- dataprep.out$Y1plot -
(dataprep.out$Y0plot %*% synth.out$solution.w)
### R_{i,j}^LTO ###
nC2 <- 16*15/2
LTO.residuals <- matrix(0, nrow = nC2, ncol = time.periods)
LTO.RMSPEs <- rep(0,nC2)
LTO.indices <- matrix(0, nrow = nC2, ncol = 2)
pair.index <- 1
for (i in 1:(16-1)) {
for (j in (i+1):16) {
LTO.indices[pair.index,] <- c(i,j)
pair.index <- pair.index + 1
}
}
### Setup DoParallel ###
cores <- detectCores()
cl <- makeCluster(cores[1]-2) #not to overload your computer
registerDoParallel(cl)
simulation.results <- foreach(pair.index = 1:nC2,
.packages = c('optimx','rgenoud','LowRankQP')) %dopar% {
i <- LTO.indices[pair.index,1]
j <- LTO.indices[pair.index,2]
jackknife.lto.units <- c(countries[i],countries[j])
controls <- countries[! countries %in% jackknife.lto.units]
### get SC on LTO unit ###
dataprep.out <- reunification.sc.dataprep(german.data, jackknife.lto.units[1], controls)
synth.out <- synth(data.prep.obj = dataprep.out, method = "BFGS",quadopt = "LowRankQP")
res1 <- dataprep.out$Y1plot -
(dataprep.out$Y0plot %*% synth.out$solution.w)
RMSPE1 <- mean(res1[(T0+1):time.periods]^2)/mean(res1[1:T0]^2)
### get SC on other LTO unit ###
dataprep.out <- reunification.sc.dataprep(german.data, jackknife.lto.units[2], controls)
synth.out <- synth(data.prep.obj = dataprep.out, method = "BFGS",quadopt = "LowRankQP")
res2 <- dataprep.out$Y1plot -
(dataprep.out$Y0plot %*% synth.out$solution.w)
RMSPE2 <- mean(res2[(T0+1):time.periods]^2)/ mean(res2[1:T0]^2)
LTO.residuals <- pmax(abs(res1),abs(res2))
LTO.RMSPEs <- max(RMSPE1, RMSPE2)
### run SC method on the actual treatment unit ###
dataprep.out <- reunification.sc.dataprep(german.data, treatment.unit, controls)
synth.out <- synth(data.prep.obj = dataprep.out, method = "BFGS",quadopt = "LowRankQP")
res <- dataprep.out$Y1plot -
(dataprep.out$Y0plot %*% synth.out$solution.w)
LTO.residual.on.newpoint <- abs(res)
LTO.RMSPEs.on.newpoint <- mean(res[(T0+1):time.periods]^2)/mean(res[1:T0]^2)
res <- list(pair.index, LTO.residual.on.newpoint, LTO.RMSPEs.on.newpoint, LTO.residuals, LTO.RMSPEs)
names(res) <- c("pair.index", "LTO.time.res.treatment", "LTO.RMSPE.treatment",
"LTO.time.max.res.controls", "LTO.RMSPE.max.controls")
res
}
simulation.results <- readRDS("GermanReunificationLTOResults.rds")
### Calculate the indicator of wins in three-way matches.
win.matrix <- matrix(0,nrow = 16, ncol = 16)
for (index in 1:nC2){
i <- LTO.indices[index,1]
j <- LTO.indices[index,2]
RMSPE.treatment <- simulation.results[[index]]$LTO.RMSPE.treatment
max.other.LTO.RMSPE <- simulation.results[[index]]$LTO.RMSPE.max.controls
win.matrix[i,j] =  (RMSPE.treatment < max.other.LTO.RMSPE)
win.matrix[j,i] = win.matrix[i,j]
}
win.matrix
LTO.pvalue = sum(win.matrix)/(2*nC2)
LTO.pvalue # pvalue is 0.04166, which is less than 1/17.
alpha = 0.05
## For a range of Gamma, optimize product p-value
Gamma = 1.5
N = 17
### create G
step1 = matrix(0, nrow = N, ncol = N-1)
step1[-treatment.unit,] <- win.matrix
G = matrix(0,nrow = N, ncol = N)
G[,-treatment.unit] <- step1
E = matrix(1, nrow = N, ncol = N)
E[treatment.unit,] = 0
diag(E) = 0
E
diag((G + t(G))%*% E)
b = 2*alpha*(N-2)*e.I
e.I = rep(0,N); e.I[treatment.unit] = 1
b = 2*alpha*(N-2)*e.I
b
Amat
### constraints. Encodes box constraints. Last two lines encode sum pi = 1. ###
Amat = matrix(0,nrow = 2*(N+1),N)
for (i in 1:N){
Amat[2*i - 1,i] = 1
Amat[2*i,i] = -1
}
Amat[2*N+1,] = rep(1,N)
Amat[2*N+2,] = rep(-1,N)
bvec = rep(c(1/(Gamma*N),-Gamma/N),N)
bvec = c(bvec,1,-1)
Amat
dim(Amat)[1]
rep("<=",dim(Amat)[1])
###############################################
#### Optimize weighted p-values; product ######
###############################################
library(quadprog)
alpha = 0.05
## For a range of Gamma, optimize product p-value
Gamma = 1.5
N = 17
### create G
step1 = matrix(0, nrow = N, ncol = N-1)
step1[-treatment.unit,] <- win.matrix
G = matrix(0,nrow = N, ncol = N)
G[,-treatment.unit] <- step1
e.II = matrix(0,N,N); e.II[treatment.unit,treatment.unit] = 1
A = G + diag(N) - (1 + alpha)*e.II
e.I = rep(0,N); e.I[treatment.unit] = 1
b = -2*alpha*e.I
# constraints. Encodes box constraints. Last two lines encode sum pi = 1.
Amat = matrix(0,nrow = 2*(N+1),N)
for (i in 1:N){
Amat[2*i - 1,i] = 1
Amat[2*i,i] = -1
}
Amat[2*N+1,] = rep(1,N)
Amat[2*N+2,] = rep(-1,N)
bvec = rep(c(1/(Gamma*N),-Gamma/N),N)
bvec = c(bvec,1,-1)
# feed into quadprog
solve.QP(Dmat = 2*A, dvec = b, Amat = t(Amat), bvec = bvec)
###########################################
#### Optimize weighted p-values; sum ######
###########################################
library(lpSolve)
alpha = 0.05
## For a range of Gamma, optimize product p-value
Gamma = 1.5
N = 17
### create G
step1 = matrix(0, nrow = N, ncol = N-1)
step1[-treatment.unit,] <- win.matrix
G = matrix(0,nrow = N, ncol = N)
G[,-treatment.unit] <- step1
E = matrix(1, nrow = N, ncol = N)
E[treatment.unit,] = 0
diag(E) = 0
e.I = rep(0,N); e.I[treatment.unit] = 1
b = 2*alpha*(N-2)*e.I
### objective vector ###
w = diag((G + t(G))%*% E) + b
### constraints. Encodes box constraints. Last two lines encode sum pi = 1. ###
Amat = matrix(0,nrow = 2*(N+1),N)
for (i in 1:N){
Amat[2*i - 1,i] = 1
Amat[2*i,i] = -1
}
Amat[2*N+1,] = rep(1,N)
Amat[2*N+2,] = rep(-1,N)
bvec = rep(c(1/(Gamma*N),-Gamma/N),N)
bvec = c(bvec,1,-1)
### plug into lpSolve ###
f.obj = w
f.con = Amat
f.dir = rep("<=",dim(Amat)[1])
f.rhs = bvec
lp("max", f.obj, f.con, f.dir, f.rhs)
dim(Amat)[1]Amat
Amat
f.rhs
f.obj
1/17
### plug into lpSolve ###
f.obj = w
f.con = Amat
f.dir = rep(">=",dim(Amat)[1])
f.rhs = bvec
lp("max", f.obj, f.con, f.dir, f.rhs)
lp = lp("max", f.obj, f.con, f.dir, f.rhs)
lp$solution
lp$objval
lp$objval > 2*alpha*(N-2)
## For a range of Gamma, optimize product p-value
Gamma = 1.1
N = 17
### create G
step1 = matrix(0, nrow = N, ncol = N-1)
step1[-treatment.unit,] <- win.matrix
G = matrix(0,nrow = N, ncol = N)
G[,-treatment.unit] <- step1
E = matrix(1, nrow = N, ncol = N)
E[treatment.unit,] = 0
diag(E) = 0
e.I = rep(0,N); e.I[treatment.unit] = 1
b = 2*alpha*(N-2)*e.I
### objective vector ###
w = diag((G + t(G))%*% E) + b
### constraints. Encodes box constraints. Last two lines encode sum pi = 1. ###
Amat = matrix(0,nrow = 2*(N+1),N)
for (i in 1:N){
Amat[2*i - 1,i] = 1
Amat[2*i,i] = -1
}
Amat[2*N+1,] = rep(1,N)
Amat[2*N+2,] = rep(-1,N)
bvec = rep(c(1/(Gamma*N),-Gamma/N),N)
bvec = c(bvec,1,-1)
### plug into lpSolve ###
f.obj = w
f.con = Amat
f.dir = rep(">=",dim(Amat)[1])
f.rhs = bvec
lp = lp("max", f.obj, f.con, f.dir, f.rhs)
lp$objval > 2*alpha*(N-2)
## For a range of Gamma, optimize product p-value
Gamma = 1.5
N = 17
### constraints. Encodes box constraints. Last two lines encode sum pi = 1. ###
Amat = matrix(0,nrow = 2*(N+1),N)
for (i in 1:N){
Amat[2*i - 1,i] = 1
Amat[2*i,i] = -1
}
Amat[2*N+1,] = rep(1,N)
Amat[2*N+2,] = rep(-1,N)
bvec = rep(c(1/(Gamma*N),-Gamma/N),N)
bvec = c(bvec,1,-1)
### plug into lpSolve ###
f.obj = w
f.con = Amat
f.dir = rep(">=",dim(Amat)[1])
f.rhs = bvec
lp = lp("max", f.obj, f.con, f.dir, f.rhs)
lp$objval > 2*alpha*(N-2)
## For a range of Gamma, optimize product p-value
Gamma = 1.2
N = 17
### constraints. Encodes box constraints. Last two lines encode sum pi = 1. ###
Amat = matrix(0,nrow = 2*(N+1),N)
for (i in 1:N){
Amat[2*i - 1,i] = 1
Amat[2*i,i] = -1
}
Amat[2*N+1,] = rep(1,N)
Amat[2*N+2,] = rep(-1,N)
bvec = rep(c(1/(Gamma*N),-Gamma/N),N)
bvec = c(bvec,1,-1)
### plug into lpSolve ###
f.obj = w
f.con = Amat
f.dir = rep(">=",dim(Amat)[1])
f.rhs = bvec
lp = lp("max", f.obj, f.con, f.dir, f.rhs)
lp$objval > 2*alpha*(N-2)
## For a range of Gamma, optimize product p-value
Gamma = 1.15
N = 17
### constraints. Encodes box constraints. Last two lines encode sum pi = 1. ###
Amat = matrix(0,nrow = 2*(N+1),N)
for (i in 1:N){
Amat[2*i - 1,i] = 1
Amat[2*i,i] = -1
}
Amat[2*N+1,] = rep(1,N)
Amat[2*N+2,] = rep(-1,N)
bvec = rep(c(1/(Gamma*N),-Gamma/N),N)
bvec = c(bvec,1,-1)
### plug into lpSolve ###
f.obj = w
f.con = Amat
f.dir = rep(">=",dim(Amat)[1])
f.rhs = bvec
lp = lp("max", f.obj, f.con, f.dir, f.rhs)
lp$objval > 2*alpha*(N-2)
constraints
Amat
b
bvec
seq(1,1.5,50)
gammas = seq(1,1.5,0.01)
gammas = seq(1,1.5,0.01)
p.values.greaterthanalpha = rep(0,length(gammas))
for (i in 1:length(gammas) ) {
Gamma = gammas[i]
bvec = rep(c(1/(Gamma*N),-Gamma/N),N)
bvec = c(bvec,1,-1)
### plug into lpSolve ###
f.obj = w
f.con = Amat
f.dir = rep(">=",dim(Amat)[1])
f.rhs = bvec
lp = lp("max", f.obj, f.con, f.dir, f.rhs)
p.values.greaterthanalpha[i] = (lp$objval > 2*alpha*(N-2))
}
p.values.greaterthanalpha
which(p.values.greaterthanalpha == 0)
end(which(p.values.greaterthanalpha == 0))
tail(which(p.values.greaterthanalpha == 0),1)
gammas[idx]
idx = tail(which(p.values.greaterthanalpha == 0),1)
gammas[idx]
alpha = 0.1
N = 17
### create G
step1 = matrix(0, nrow = N, ncol = N-1)
step1[-treatment.unit,] <- win.matrix
G = matrix(0,nrow = N, ncol = N)
G[,-treatment.unit] <- step1
E = matrix(1, nrow = N, ncol = N)
E[treatment.unit,] = 0
diag(E) = 0
e.I = rep(0,N); e.I[treatment.unit] = 1
b = (2*alpha*(N-1)-2)*e.I
### objective vector ###
w = diag((G + t(G))%*% E) + b
### constraints. Encodes box constraints. Last two lines encode sum pi = 1. ###
Amat = matrix(0,nrow = 2*(N+1),N)
for (i in 1:N){
Amat[2*i - 1,i] = 1
Amat[2*i,i] = -1
}
Amat[2*N+1,] = rep(1,N)
Amat[2*N+2,] = rep(-1,N)
Gamma = 1.15
bvec = rep(c(1/(Gamma*N),-Gamma/N),N)
bvec = c(bvec,1,-1)
### plug into lpSolve ###
f.obj = w
f.con = Amat
f.dir = rep(">=",dim(Amat)[1])
f.rhs = bvec
lp = lp("max", f.obj, f.con, f.dir, f.rhs)
lp$objval > 2*alpha*(N-1) - 2
alpha = 0.1
N = 17
### create G
step1 = matrix(0, nrow = N, ncol = N-1)
step1[-treatment.unit,] <- win.matrix
G = matrix(0,nrow = N, ncol = N)
G[,-treatment.unit] <- step1
E = matrix(1, nrow = N, ncol = N)
E[treatment.unit,] = 0
diag(E) = 0
e.I = rep(0,N); e.I[treatment.unit] = 1
b = (2*alpha*(N-1)-2)*e.I
### objective vector ###
w = diag((G + t(G))%*% E) + b
### constraints. Encodes box constraints. Last two lines encode sum pi = 1. ###
Amat = matrix(0,nrow = 2*(N+1),N)
for (i in 1:N){
Amat[2*i - 1,i] = 1
Amat[2*i,i] = -1
}
Amat[2*N+1,] = rep(1,N)
Amat[2*N+2,] = rep(-1,N)
Gamma = 1.15
bvec = rep(c(1/(Gamma*N),-Gamma/N),N)
bvec = c(bvec,1,-1)
### plug into lpSolve ###
f.obj = w
f.con = Amat
f.dir = rep(">=",dim(Amat)[1])
f.rhs = bvec
lp = lp("min", f.obj, f.con, f.dir, f.rhs)
lp$objval > 2*alpha*(N-1) - 2
gammas = seq(1,2,0.05)
p.values.lessthanalpha = rep(0,length(gammas))
for (i in 1:length(gammas) ) {
Gamma = gammas[i]
bvec = rep(c(1/(Gamma*N),-Gamma/N),N)
bvec = c(bvec,1,-1)
### plug into lpSolve ###
f.obj = w
f.con = Amat
f.dir = rep(">=",dim(Amat)[1])
f.rhs = bvec
lp = lp("min", f.obj, f.con, f.dir, f.rhs)
p.values.lessthanalpha[i] = (lp$objval < 2*alpha*(N-1) - 2)
}
idx = tail(which(p.values.greaterthanalpha == 0),1)
gammas[idx]
p.values.lessthanalpha
gammas = seq(1,5,0.05)
p.values.lessthanalpha = rep(0,length(gammas))
for (i in 1:length(gammas) ) {
Gamma = gammas[i]
bvec = rep(c(1/(Gamma*N),-Gamma/N),N)
bvec = c(bvec,1,-1)
### plug into lpSolve ###
f.obj = w
f.con = Amat
f.dir = rep(">=",dim(Amat)[1])
f.rhs = bvec
lp = lp("min", f.obj, f.con, f.dir, f.rhs)
p.values.lessthanalpha[i] = (lp$objval < 2*alpha*(N-1) - 2)
}
p.values.lessthanalpha
alpha = 0.1
N = 17
### create G
step1 = matrix(0, nrow = N, ncol = N-1)
step1[-treatment.unit,] <- win.matrix
G = matrix(0,nrow = N, ncol = N)
G[,-treatment.unit] <- step1
E = matrix(1, nrow = N, ncol = N)
E[treatment.unit,] = 0
diag(E) = 0
e.I = rep(0,N); e.I[treatment.unit] = 1
b = (2*alpha*(N-1)-2)*e.I
### objective vector ###
w = diag((G + t(G))%*% E) + b
### constraints. Encodes box constraints. Last two lines encode sum pi = 1. ###
Amat = matrix(0,nrow = 2*(N+1),N)
for (i in 1:N){
Amat[2*i - 1,i] = 1
Amat[2*i,i] = -1
}
Amat[2*N+1,] = rep(1,N)
Amat[2*N+2,] = rep(-1,N)
gammas = seq(1,5,0.05)
p.values.lessthanalpha = rep(0,length(gammas))
for (i in 1:length(gammas) ) {
Gamma = gammas[i]
bvec = rep(c(1/(Gamma*N),-Gamma/N),N)
bvec = c(bvec,1,-1)
### plug into lpSolve ###
f.obj = w
f.con = Amat
f.dir = rep(">=",dim(Amat)[1])
f.rhs = bvec
lp = lp("max", f.obj, f.con, f.dir, f.rhs)
p.values.lessthanalpha[i] = (lp$objval > 2*alpha*(N-1) - 2)
}
p.values.lessthanalpha
LTO.valid.pvalue = sum(win.matrix)/((N-1)*(N-1)) + 1/(N-1)
LTO.valid.pvalue # pvalue is 0.04166, which is less than 1/17.
install.packages(
file.path(
Sys.getenv("GUROBI_HOME"),
"R/gurobi_10.0-2_R_x86_64-pc-linux-gnu.tar.gz"
),
repos = NULL
)
Sys.getenv("GUROBI_HOME")
install.packages(
file.path(
"/Library/gurobi1002/macos_universal2",
"R/gurobi_10.0-2_R_4.2.0.tgz"
),
repos = NULL
)
library(gurobi)
install.packages("slam")
library(gurobi)
